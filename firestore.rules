rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /{document=**} {
      allow read: if 
      	true
    }
    function userIsLoggedIn(){
      return request.auth != null  
    }
    function isNewResource(){
     return resource == null  
    }
    function resourceBelongsToUser(){
     return request.auth.uid == resource.data.userId
    }
    //threads
    match /threads/{thread}{
      function isOnlyAppendingPostAndContributor(){
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['posts', 'contributors'])
      }
      allow write: if
      	userIsLoggedIn() && (isNewResource() || resourceBelongsToUser())
      allow update: if
        isOnlyAppendingPostAndContributor()
    }
    //posts
    match /posts/{post}{
      allow write: if
      	userIsLoggedIn() && (isNewResource() || resourceBelongsToUser())
    }
    
    //forums
    match /forums/{forum}{
      function isOnlyAppendingThread(){
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['threads'])
      }
      allow update: if
        userIsLoggedIn() && isOnlyAppendingThread()
    }
    
    //users
    match /users/{user}{
      allow create: if
        true
      allow update: if
        request.auth.uid == resource.id
    }
  }
}